version: '3.8'

volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  app_mysql: {}

services:

  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1

  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    ports:
      - "9092:9092"
      - "9094:9094"
    links:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "topic-test:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  # Database for druid
  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    restart: unless-stopped
    volumes:
      - metadata_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid

  # Need 3.5 or later for container node
  coordinator:
    image: duynguyenngoc/druid:v1.0.0
    container_name: coordinator
    restart: unless-stopped
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - ./app_druid/environment

  broker:
    image: duynguyenngoc/druid:v1.0.0
    container_name: broker
    restart: unless-stopped
    volumes:
      - broker_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - ./app_druid/environment

  historical:
    image: duynguyenngoc/druid:v1.0.0
    container_name: historical
    restart: unless-stopped
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - ./app_druid/environment

  middlemanager:
    image: duynguyenngoc/druid:v1.0.0
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - ./app_druid/environment

  router:
    image: duynguyenngoc/druid:v1.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - ./app_druid/environment

  # # Superset Demo need change to superset latest on production
  # superset:
  #   image: amancevice/superset:1.4.1
  #   container_name: superset
  #   restart: unless-stopped
  #   ports:
  #     - 8088:8088
    

  # Airflow sequency need change to celery on product
  airflow:
    # image: duynguyenngoc/airflow:v1.0.0
    image: airflow_tudv
    container_name: airflow
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - ./app_airflow/app/:/airflow/
    environment:
      - AIRFLOW_HOME=/airflow
      - AIRFLOW_UID=50000
    ports:
      - 3000:8080
    command: airflow standalone   
  
  
  # Redis for Airflow
  redis:
    image: redis
    restart: unless-stopped
    volumes:
      - ./app_redis:/data

  # mysql
  mysql:
    image: mysql:8.0
    cap_add: 
      - SYS_NICE
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3380:3306"
    environment:
      - MYSQL_DATABASE=stockalert
      - MYSQL_ROOT_PASSWORD=tudv
      - MYSQL_USER=tudv
      - MYSQL_PASSWORD=tu123
    volumes:
      - app_mysql:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql

